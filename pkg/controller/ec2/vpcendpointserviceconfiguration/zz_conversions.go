/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package vpcendpointserviceconfiguration

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"

	svcapitypes "github.com/crossplane/provider-aws/apis/ec2/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeVpcEndpointServiceConfigurationsInput returns input for read
// operation.
func GenerateDescribeVpcEndpointServiceConfigurationsInput(cr *svcapitypes.VPCEndpointServiceConfiguration) *svcsdk.DescribeVpcEndpointServiceConfigurationsInput {
	res := &svcsdk.DescribeVpcEndpointServiceConfigurationsInput{}

	if cr.Spec.ForProvider.DryRun != nil {
		res.SetDryRun(*cr.Spec.ForProvider.DryRun)
	}

	return res
}

// GenerateVPCEndpointServiceConfiguration returns the current state in the form of *svcapitypes.VPCEndpointServiceConfiguration.
func GenerateVPCEndpointServiceConfiguration(resp *svcsdk.DescribeVpcEndpointServiceConfigurationsOutput) *svcapitypes.VPCEndpointServiceConfiguration {
	cr := &svcapitypes.VPCEndpointServiceConfiguration{}

	found := false
	for _, elem := range resp.ServiceConfigurations {
		if elem.AcceptanceRequired != nil {
			cr.Spec.ForProvider.AcceptanceRequired = elem.AcceptanceRequired
		} else {
			cr.Spec.ForProvider.AcceptanceRequired = nil
		}
		if elem.GatewayLoadBalancerArns != nil {
			f3 := []*string{}
			for _, f3iter := range elem.GatewayLoadBalancerArns {
				var f3elem string
				f3elem = *f3iter
				f3 = append(f3, &f3elem)
			}
			cr.Spec.ForProvider.GatewayLoadBalancerARNs = f3
		} else {
			cr.Spec.ForProvider.GatewayLoadBalancerARNs = nil
		}
		if elem.NetworkLoadBalancerArns != nil {
			f5 := []*string{}
			for _, f5iter := range elem.NetworkLoadBalancerArns {
				var f5elem string
				f5elem = *f5iter
				f5 = append(f5, &f5elem)
			}
			cr.Spec.ForProvider.NetworkLoadBalancerARNs = f5
		} else {
			cr.Spec.ForProvider.NetworkLoadBalancerARNs = nil
		}
		if elem.PrivateDnsName != nil {
			cr.Spec.ForProvider.PrivateDNSName = elem.PrivateDnsName
		} else {
			cr.Spec.ForProvider.PrivateDNSName = nil
		}
		found = true
		break
	}
	if !found {
		return cr
	}

	return cr
}

// GenerateCreateVpcEndpointServiceConfigurationInput returns a create input.
func GenerateCreateVpcEndpointServiceConfigurationInput(cr *svcapitypes.VPCEndpointServiceConfiguration) *svcsdk.CreateVpcEndpointServiceConfigurationInput {
	res := &svcsdk.CreateVpcEndpointServiceConfigurationInput{}

	if cr.Spec.ForProvider.AcceptanceRequired != nil {
		res.SetAcceptanceRequired(*cr.Spec.ForProvider.AcceptanceRequired)
	}
	if cr.Spec.ForProvider.ClientToken != nil {
		res.SetClientToken(*cr.Spec.ForProvider.ClientToken)
	}
	if cr.Spec.ForProvider.DryRun != nil {
		res.SetDryRun(*cr.Spec.ForProvider.DryRun)
	}
	if cr.Spec.ForProvider.GatewayLoadBalancerARNs != nil {
		f3 := []*string{}
		for _, f3iter := range cr.Spec.ForProvider.GatewayLoadBalancerARNs {
			var f3elem string
			f3elem = *f3iter
			f3 = append(f3, &f3elem)
		}
		res.SetGatewayLoadBalancerArns(f3)
	}
	if cr.Spec.ForProvider.NetworkLoadBalancerARNs != nil {
		f4 := []*string{}
		for _, f4iter := range cr.Spec.ForProvider.NetworkLoadBalancerARNs {
			var f4elem string
			f4elem = *f4iter
			f4 = append(f4, &f4elem)
		}
		res.SetNetworkLoadBalancerArns(f4)
	}
	if cr.Spec.ForProvider.PrivateDNSName != nil {
		res.SetPrivateDnsName(*cr.Spec.ForProvider.PrivateDNSName)
	}
	if cr.Spec.ForProvider.TagSpecifications != nil {
		f6 := []*svcsdk.TagSpecification{}
		for _, f6iter := range cr.Spec.ForProvider.TagSpecifications {
			f6elem := &svcsdk.TagSpecification{}
			if f6iter.ResourceType != nil {
				f6elem.SetResourceType(*f6iter.ResourceType)
			}
			if f6iter.Tags != nil {
				f6elemf1 := []*svcsdk.Tag{}
				for _, f6elemf1iter := range f6iter.Tags {
					f6elemf1elem := &svcsdk.Tag{}
					if f6elemf1iter.Key != nil {
						f6elemf1elem.SetKey(*f6elemf1iter.Key)
					}
					if f6elemf1iter.Value != nil {
						f6elemf1elem.SetValue(*f6elemf1iter.Value)
					}
					f6elemf1 = append(f6elemf1, f6elemf1elem)
				}
				f6elem.SetTags(f6elemf1)
			}
			f6 = append(f6, f6elem)
		}
		res.SetTagSpecifications(f6)
	}

	return res
}

// GenerateModifyVpcEndpointServiceConfigurationInput returns an update input.
func GenerateModifyVpcEndpointServiceConfigurationInput(cr *svcapitypes.VPCEndpointServiceConfiguration) *svcsdk.ModifyVpcEndpointServiceConfigurationInput {
	res := &svcsdk.ModifyVpcEndpointServiceConfigurationInput{}

	if cr.Spec.ForProvider.AcceptanceRequired != nil {
		res.SetAcceptanceRequired(*cr.Spec.ForProvider.AcceptanceRequired)
	}
	if cr.Spec.ForProvider.DryRun != nil {
		res.SetDryRun(*cr.Spec.ForProvider.DryRun)
	}
	if cr.Spec.ForProvider.PrivateDNSName != nil {
		res.SetPrivateDnsName(*cr.Spec.ForProvider.PrivateDNSName)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
